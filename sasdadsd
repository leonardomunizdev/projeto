import React from 'react';
import { Modal, View, TextInput, Button, TouchableOpacity, Text, FlatList, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import styles from '../../styles/screens/OptionsScreenStyles';
import { useCategories } from '../../context/CategoryContext';

const CategoryModal = ({ visible, onClose, onSave, newCategoryName, setNewCategoryName, selectedCategoryType, setSelectedCategoryType }) => {
  const { categories, addCategory, removeCategory } = useCategories();

  const handleAddCategory = () => {
    if (newCategoryName.trim() === '') {
      Alert.alert('Erro', 'O nome da categoria não pode estar vazio.');
      return;
    }
    addCategory(newCategoryName, selectedCategoryType);
    setNewCategoryName('');
    setSelectedCategoryType('income');
    onClose(); // Fechar o modal após adicionar a categoria
  };

  // Filtrar categorias por tipo, se necessário
  const filteredCategories = categories.filter(category => category.type === selectedCategoryType);

  const handleRemoveCategory = (id) => {
    removeCategory(id);
  };

  return (
    <Modal
      visible={visible}
      animationType="slide"
      onRequestClose={onClose}
      transparent={true}
    >
      <View style={styles.fullScreenModal}>
        <View style={styles.modalContent}>
          <TouchableOpacity
            style={styles.closeButton}
            onPress={onClose}
          >
            <Ionicons name="close" size={24} color="black" />
          </TouchableOpacity>
          <Text style={styles.modalTitle}>Gerir Categorias</Text>
          <View style={styles.categoryButtonContainer}>
            <TouchableOpacity
              style={[
                styles.categoryButton,
                selectedCategoryType === 'income' && styles.incomeButton,
              ]}
              onPress={() => setSelectedCategoryType('income')}
            >
              <Text style={[
                styles.categoryButtonText,
                selectedCategoryType === 'income' && styles.incomeButtonText,
              ]}>Receita</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[
                styles.categoryButton,
                selectedCategoryType === 'expense' && styles.expenseButton,
              ]}
              onPress={() => setSelectedCategoryType('expense')}
            >
              <Text style={[
                styles.categoryButtonText,
                selectedCategoryType === 'expense' && styles.expenseButtonText,
              ]}>Despesa</Text>
            </TouchableOpacity>
          </View>
          <TextInput
            style={styles.input}
            value={newCategoryName}
            onChangeText={setNewCategoryName}
            placeholder="Nome da nova categoria"
          />
          <Button title="Adicionar Categoria" onPress={handleAddCategory} />
          <FlatList
            data={filteredCategories}
            keyExtractor={item => item.id}
            renderItem={({ item }) => (
              <View style={styles.categoryItem}>
                <Text style={styles.categoryName}>{item.name}</Text>
                <TouchableOpacity onPress={() => handleRemoveCategory(item.id)}>
                  <Text style={styles.removeButton}>Remover</Text>
                </TouchableOpacity>
              </View>
            )}
          />
        </View>
      </View>
    </Modal>
  );
};

export default CategoryModal;
